#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct 26 10:18:26 2022

@author: max
"""

import torch 
import torch.nn as nn 

signal = torch.tensor([[[-0.0236, -0.0137],
         [ 0.7580,  0.9042],
         [ 0.7753,  0.3971],
         [ 0.7232,  1.0163],
         [ 0.7490,  0.4884],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000]],

        [[-0.0236, -0.0137],
         [ 0.6409,  0.5970],
         [ 0.3926,  0.4984],
         [ 0.6124,  0.6025],
         [ 0.3900,  0.5254],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000]],

        [[-0.0236, -0.0137],
         [ 0.6180,  0.6003],
         [ 0.6568,  0.7312],
         [ 0.6214,  0.6015],
         [ 0.6749,  0.7028],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000],
         [ 0.0000,  0.0000]]])


tlnorm = nn.LayerNorm((33,2))
tnormed = tlnorm(signal)


def LayerNorm(t):
    bsz = t.shape[0]
    seqL = t.shape[1]
    atts = t.shape[2]
    
    tn = t.reshape(bsz,t.shape[1]*t.shape[2]) #flatten
    eps = 1e-05
    mu = torch.mean(tn,1)
    for i in range(bsz):
        std = (((tn[i]-mu[i])**2).sum()/(tn.shape[1])).sqrt()
        for elem in range(seqL*atts):
            #if(tn[i,elem] == 0.0):
             #   break
            tn[i,elem] = (tn[i,elem]-mu[i])/std
    
    return tn.reshape(bsz,seqL,atts)

selftest = LayerNorm(signal)
        

###from stackoverflow
x = torch.normal(0, 1, [5])
mean = x.sum(axis = 0)/(x.shape[0])
std = (((x - mean)**2).sum()/(x.shape[0])).sqrt()

print((x - mean)/std)
# tensor([ 0.8972, -0.1496, -1.5654,  1.2419, -0.4242])

print(nn.LayerNorm(5, elementwise_affine = False)(x.unsqueeze(0)))
# tensor([ 0.8972, -0.1496, -1.5654,  1.2419, -0.4242])



#selfmade 
mux = torch.mean(x,0)
Vx = torch.var(x,0)
nx = (x-mux)/torch.sqrt(Vx)